plugins {
    id "idea"
    id "checkstyle"
    id "findbugs"
    id "pmd"

    id "jacoco"

    id "org.jetbrains.intellij" version "0.2.14"
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: "junit", name: "junit", version: junitVersion
    testCompile group: "org.assertj", name: "assertj-core", version: assertjVersion
}

configurations {
    codacy
}

// Change the output directory for the main source set back to the old path
sourceSets.main.output.classesDir = new File(buildDir, "classes/main")
sourceSets.test.output.classesDir = new File(buildDir, "classes/test")


intellij {
    version = intellijVersion
    updateSinceUntilBuild = false
}

checkstyle {
    ignoreFailures = true
}

findbugs {
    ignoreFailures = true
    includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
}

pmd {
    ignoreFailures = true
    ruleSetFiles = files("$rootProject.projectDir/config/pmd/pmd-rules.xml")
}

jacocoTestReport {
    reports {
        csv.enabled = false
        html.enabled = true
        xml.enabled = true
    }
}

/// Codacy
task uploadCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

task(codacyDepsize) << {
    def size = 0
    configurations.codacy.collect { it.length() / (1024 * 1024) }.each { size += it }
    println "Total dependencies size: ${Math.round(size * 100) / 100} Mb"

    configurations
            .codacy
            .sort { -it.length() }
            .each { println "${it.name} : ${Math.round(it.length() / (1024) * 100) / 100} kb" }
}

task(codacyLocs) << {
    configurations.codacy.each {
        String jarName = it
        println jarName
    }
}
