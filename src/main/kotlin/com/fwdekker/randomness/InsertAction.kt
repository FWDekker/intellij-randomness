package com.fwdekker.randomness

import com.fwdekker.randomness.Timely.generateTimely
import com.intellij.codeInsight.hint.HintManager
import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.actionSystem.CommonDataKeys
import com.intellij.openapi.command.WriteCommandAction
import javax.swing.Icon


/**
 * Inserts strings in the editor.
 *
 * @property repeat `true` if and only if the same value should be inserted at each caret.
 */
abstract class InsertAction(private val repeat: Boolean = false) : AnAction() {
    /**
     * The icon to display as representing this action.
     */
    abstract val icon: Icon?

    /**
     * The name of this action.
     */
    abstract val name: String


    /**
     * Sets the title of this action and disables this action if no editor is currently opened.
     *
     * @param event carries contextual information
     */
    override fun update(event: AnActionEvent) {
        val presentation = event.presentation
        val editor = event.getData(CommonDataKeys.EDITOR)

        presentation.icon = icon
        presentation.text = name
        presentation.isEnabled = editor != null
    }

    /**
     * Inserts the data generated by the scheme at the caret(s) in the editor; one datum for each caret.
     *
     * @param event carries contextual information
     */
    @Suppress("ReturnCount") // Result of null checks at start
    override fun actionPerformed(event: AnActionEvent) {
        val editor = event.getData(CommonDataKeys.EDITOR) ?: return
        val project = event.getData(CommonDataKeys.PROJECT) ?: return

        val data =
            try {
                generateTimely {
                    if (repeat)
                        generateStrings(1).single().let { string -> List(editor.caretModel.caretCount) { string } }
                    else
                        generateStrings(editor.caretModel.caretCount)
                }
            } catch (e: DataGenerationException) {
                HintManager.getInstance().showErrorHint(
                    editor,
                    if (e.message.isNullOrBlank())
                        Bundle("shared.error.could_not_generate")
                    else
                        Bundle("shared.error.could_not_generate.no_message", e.message)
                )
                return
            }

        WriteCommandAction.runWriteCommandAction(project) {
            editor.caretModel.allCarets.forEachIndexed { i, caret ->
                val start = caret.selectionStart
                val end = caret.selectionEnd
                val newEnd = start + data[i].length

                editor.document.replaceString(start, end, data[i])
                caret.setSelection(start, newEnd)
            }
        }
    }


    /**
     * Generates [count] strings.
     *
     * @param count the number of strings to generate
     * @return [count] strings
     */
    abstract fun generateStrings(count: Int): List<String>
}
