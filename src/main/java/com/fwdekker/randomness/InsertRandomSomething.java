package com.fwdekker.randomness;

import com.fwdekker.randomness.array.ArraySettings;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import com.intellij.openapi.actionSystem.Presentation;
import com.intellij.openapi.command.WriteCommandAction;
import com.intellij.openapi.editor.CaretModel;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.project.Project;
import java.awt.event.InputEvent;
import java.util.ArrayList;
import java.util.List;


/**
 * Inserts a randomly generated string at the position of the event's editor's caret.
 */
public abstract class InsertRandomSomething extends AnAction {
    private final ArraySettings arraySettings;


    /**
     * Constructs a new {@code InsertRandomSomething} that uses the singleton {@code ArraySettings} instance.
     */
    public InsertRandomSomething() {
        this.arraySettings = ArraySettings.getInstance();
    }

    /**
     * Constructs a new {@code InsertRandomSomething} that uses the given {@code ArraySettings} instance.
     *
     * @param arraySettings the settings to use for generating arrays
     */
    public InsertRandomSomething(final ArraySettings arraySettings) {
        this.arraySettings = arraySettings;
    }


    /**
     * Disables this action if no editor is currently opened.
     *
     * @param event the performed action
     */
    @Override
    public final void update(final AnActionEvent event) {
        final Presentation presentation = event.getPresentation();
        final Editor editor = event.getData(CommonDataKeys.EDITOR);

        presentation.setText(getName());
        presentation.setEnabled(editor != null);
    }

    /**
     * Inserts the string generated by {@link #generateString()} at the caret(s) in the editor.
     *
     * @param event the performed action
     */
    @Override
    public final void actionPerformed(final AnActionEvent event) {
        if ((event.getModifiers() & (InputEvent.CTRL_MASK | InputEvent.CTRL_DOWN_MASK)) != 0) {
            getSettingsAction().actionPerformed(event);
            return;
        }

        final Editor editor = event.getData(CommonDataKeys.EDITOR);
        if (editor == null) {
            return;
        }
        final Project project = event.getData(CommonDataKeys.PROJECT);
        final Document document = editor.getDocument();
        final CaretModel caretModel = editor.getCaretModel();

        final Runnable replaceCaretSelections = () -> caretModel.getAllCarets().forEach(caret -> {
            final int start = caret.getSelectionStart();
            final int end = caret.getSelectionEnd();

            final String string = generateString(event);
            final int newEnd = start + string.length();

            document.replaceString(start, end, string);
            caret.setSelection(start, newEnd);
        });

        WriteCommandAction.runWriteCommandAction(project, replaceCaretSelections);
    }


    /**
     * Returns the name of the action to display.
     *
     * @return the name of the action to display
     */
    protected abstract String getName();

    /**
     * Returns the {@link SettingsAction} to manage this action's behaviour.
     *
     * @return the {@link SettingsAction} to manage this action's behaviour
     */
    protected abstract SettingsAction getSettingsAction();

    /**
     * Generates a random string.
     *
     * @return a random string
     */
    protected abstract String generateString();

    /**
     * Generates a random string based on the given {@link AnActionEvent}.
     * <p>
     * In particular, it selects whether to generate a single string or an array of strings.
     *
     * @param event the performed action
     * @return a random string based on the given {@link AnActionEvent}
     */
    private String generateString(final AnActionEvent event) {
        final boolean multiple = (event.getModifiers() & (InputEvent.SHIFT_MASK | InputEvent.SHIFT_DOWN_MASK)) == 0;
        if (multiple) {
            return generateString();
        }

        final List<String> strings = new ArrayList<>();

        for (int i = 0; i < arraySettings.getCount(); i++) {
            strings.add(generateString());
        }

        return arraySettings.arrayify(strings);
    }
}
