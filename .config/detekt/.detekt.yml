comments:
  # [Disagree] License in each file is unnecessary.
  AbsentOrWrongFileLicense:
    active: false
  # [Disagree] Simple private functions should be documented too.
  CommentOverPrivateFunction:
    active: false
  # [Disagree] Simple private properties should be documented too.
  CommentOverPrivateProperty:
    active: false

complexity:
  # [Disagree] Acceptable if used sparingly.
  LabeledExpression:
    active: false
  # [False Positive] Solved using resource bundles. All remaining duplicates are resource identifiers.
  StringLiteralDuplication:
    active: false

formatting:
  # [Disagree] Acceptable for many short arguments.
  ArgumentListWrapping:
    active: false
  # [Bug] Incorrectly detects violation if semicolon is followed by more than one newline.
  EnumWrapping:
    active: false
  # [Disagree] Multi-line expressions are easier to understand if they start on the next line.
  FunctionSignature:
    active: false
  # [Disagree] Short one-liners are easier to understand.
  IfElseWrapping:
    active: false
  # [Bug] Causes ugly indentation when using named multiline arguments to a function.
  MultilineExpressionWrapping:
    active: false
  # [Disagree] Braces use unnecessary extra space.
  MultiLineIfElse:
    active: false
  # [Disagree] Consecutive blank lines are used consistently to group blocks of code.
  NoConsecutiveBlankLines:
    active: false
  # [Disagree] Unnecessary, except for calls with vararg.
  TrailingCommaOnCallSite:
    active: false

potential-bugs:
  # [Exception] Initialised by scene builder.
  LateinitUsage:
    ignoreOnClassesPattern: ".*Editor"

style:
  # [Disagree] `apply` is confusing to use because of namespace conflicts.
  AlsoCouldBeApply:
    active: false
  # [Disagree] Braces use unnecessary extra space, but consistency helps in legibility.
  BracesOnIfStatements:
    multiLine: consistent
  # [Disagree] Legibility is possible despite consistency because it is wrapped in a multi-line `when` block.
  BracesOnWhenStatements:
    multiLine: necessary
  # [Disagree] Functions on data classes are useful.
  DataClassContainsFunctions:
    active: false
  # [Disagree] Mutable data classes are useful.
  DataClassShouldBeImmutable:
    active: false
  # [Exception] Acceptable in (parameterized) tests.
  DestructuringDeclarationWithTooManyEntries:
    excludes:
      - '**/test/**'
  # [Bug] Fails when used as function expression body.
  MultilineRawStringIndentation:
    active: false
  # [Bug] False positives when there are two newlines after the imports.
  SpacingBetweenPackageAndImports:
    active: false
  # [Bug] Suggests using raw string in constant, but then `trimIndent` is not possible, resulting in weird indenting.
  StringShouldBeRawString:
    active: false
